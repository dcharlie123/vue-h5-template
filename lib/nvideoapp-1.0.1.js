!function(n,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.Nvideoapp=e():n.Nvideoapp=e()}(window,function(){return function(n){var e={};function r(t){if(e[t])return e[t].exports;var s=e[t]={i:t,l:!1,exports:{}};return n[t].call(s.exports,s,s.exports,r),s.l=!0,s.exports}return r.m=n,r.c=e,r.d=function(n,e,t){r.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:t})},r.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},r.t=function(n,e){if(1&e&&(n=r(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var t=Object.create(null);if(r.r(t),Object.defineProperty(t,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var s in n)r.d(t,s,function(e){return n[e]}.bind(null,s));return t},r.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return r.d(e,"a",e),e},r.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},r.p="",r(r.s="./src/assets/utils/nvideoapp.js")}({"./node_modules/css-loader/dist/cjs.js!./src/assets/css/bounceIn.css":function(module,exports,__webpack_require__){eval('// Imports\nvar ___CSS_LOADER_API_IMPORT___ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ "./node_modules/css-loader/dist/runtime/api.js");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.i, ".dialogBounceIn {\\r\\n    animation-duration: .2s;\\r\\n    animation-fill-mode: both;\\r\\n    -webkit-animation-name: dialogBounceIn;\\r\\n    animation-name: dialogBounceIn;\\r\\n    transform-origin:50% -25%;\\r\\n}\\r\\n\\r\\n@keyframes dialogBounceIn {\\r\\n    0% {\\r\\n        opacity: 0;\\r\\n        -webkit-transform: scale3d(0.3, 0.3, 0.3) translateY(-50%);\\r\\n        transform: scale3d(0.3, 0.3, 0.3) translateY(-50%);\\r\\n    }\\r\\n\\r\\n    to {\\r\\n        opacity: 1;\\r\\n        -webkit-transform: translateY(-50%) scale3d(1, 1, 1);\\r\\n        transform: translateY(-50%) scale3d(1, 1, 1) ;\\r\\n    }\\r\\n}", ""]);\n// Exports\nmodule.exports = exports;\n\n\n//# sourceURL=webpack://Nvideoapp/./src/assets/css/bounceIn.css?./node_modules/css-loader/dist/cjs.js')},"./node_modules/css-loader/dist/runtime/api.js":function(module,exports,__webpack_require__){"use strict";eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return "@media ".concat(item[2], " {").concat(content, "}");\n      }\n\n      return content;\n    }).join(\'\');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === \'string\') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \'\']];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = "".concat(mediaQuery, " and ").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || \'\'; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === \'function\') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return "/*# sourceURL=".concat(cssMapping.sourceRoot || \'\').concat(source, " */");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\'\\n\');\n  }\n\n  return [content].join(\'\\n\');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n  return "/*# ".concat(data, " */");\n}\n\n//# sourceURL=webpack://Nvideoapp/./node_modules/css-loader/dist/runtime/api.js?')},"./node_modules/dsbridge/index.js":function(module,exports){eval('var bridge = {\n    default:this,// for typescript\n    call: function (method, args, cb) {\n        var ret = \'\';\n        if (typeof args == \'function\') {\n            cb = args;\n            args = {};\n        }\n        var arg={data:args===undefined?null:args}\n        if (typeof cb == \'function\') {\n            var cbName = \'dscb\' + window.dscb++;\n            window[cbName] = cb;\n            arg[\'_dscbstub\'] = cbName;\n        }\n        arg = JSON.stringify(arg)\n\n        //if in webview that dsBridge provided, call!\n        if(window._dsbridge){\n           ret=  _dsbridge.call(method, arg)\n        }else if(window._dswk||navigator.userAgent.indexOf("_dsbridge")!=-1){\n           ret = prompt("_dsbridge=" + method, arg);\n        }\n\n       return  JSON.parse(ret||\'{}\').data\n    },\n    register: function (name, fun, asyn) {\n        var q = asyn ? window._dsaf : window._dsf\n        if (!window._dsInit) {\n            window._dsInit = true;\n            //notify native that js apis register successfully on next event loop\n            setTimeout(function () {\n                bridge.call("_dsb.dsinit");\n            }, 0)\n        }\n        if (typeof fun == "object") {\n            q._obs[name] = fun;\n        } else {\n            q[name] = fun\n        }\n    },\n    registerAsyn: function (name, fun) {\n        this.register(name, fun, true);\n    },\n    hasNativeMethod: function (name, type) {\n        return this.call("_dsb.hasNativeMethod", {name: name, type:type||"all"});\n    },\n    disableJavascriptDialogBlock: function (disable) {\n        this.call("_dsb.disableJavascriptDialogBlock", {\n            disable: disable !== false\n        })\n    }\n};\n\n!function () {\n    if (window._dsf) return;\n    var ob = {\n        _dsf: {\n            _obs: {}\n        },\n        _dsaf: {\n            _obs: {}\n        },\n        dscb: 0,\n        dsBridge: bridge,\n        close: function () {\n            bridge.call("_dsb.closePage")\n        },\n        _handleMessageFromNative: function (info) {\n            var arg = JSON.parse(info.data);\n            var ret = {\n                id: info.callbackId,\n                complete: true\n            }\n            var f = this._dsf[info.method];\n            var af = this._dsaf[info.method]\n            var callSyn = function (f, ob) {\n                ret.data = f.apply(ob, arg)\n                bridge.call("_dsb.returnValue", ret)\n            }\n            var callAsyn = function (f, ob) {\n                arg.push(function (data, complete) {\n                    ret.data = data;\n                    ret.complete = complete!==false;\n                    bridge.call("_dsb.returnValue", ret)\n                })\n                f.apply(ob, arg)\n            }\n            if (f) {\n                callSyn(f, this._dsf);\n            } else if (af) {\n                callAsyn(af, this._dsaf);\n            } else {\n                //with namespace\n                var name = info.method.split(\'.\');\n                if (name.length<2) return;\n                var method=name.pop();\n                var namespace=name.join(\'.\')\n                var obs = this._dsf._obs;\n                var ob = obs[namespace] || {};\n                var m = ob[method];\n                if (m && typeof m == "function") {\n                    callSyn(m, ob);\n                    return;\n                }\n                obs = this._dsaf._obs;\n                ob = obs[namespace] || {};\n                m = ob[method];\n                if (m && typeof m == "function") {\n                    callAsyn(m, ob);\n                    return;\n                }\n            }\n        }\n    }\n    for (var attr in ob) {\n        window[attr] = ob[attr]\n    }\n    bridge.register("_hasJavascriptMethod", function (method, tag) {\n         var name = method.split(\'.\')\n         if(name.length<2) {\n           return !!(_dsf[name]||_dsaf[name])\n         }else{\n           // with namespace\n           var method=name.pop()\n           var namespace=name.join(\'.\')\n           var ob=_dsf._obs[namespace]||_dsaf._obs[namespace]\n           return ob&&!!ob[method]\n         }\n    })\n}();\n\nmodule.exports = bridge;\n\n//# sourceURL=webpack://Nvideoapp/./node_modules/dsbridge/index.js?')},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":function(module,exports,__webpack_require__){"use strict";eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : undefined;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && btoa) {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};\n\n//# sourceURL=webpack://Nvideoapp/./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js?")},"./src/assets/css/bounceIn.css":function(module,exports,__webpack_require__){eval('var api = __webpack_require__(/*! ../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js");\n            var content = __webpack_require__(/*! !../../../node_modules/css-loader/dist/cjs.js!./bounceIn.css */ "./node_modules/css-loader/dist/cjs.js!./src/assets/css/bounceIn.css");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === \'string\') {\n              content = [[module.i, content, \'\']];\n            }\n\nvar options = {};\n\noptions.insert = "head";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};\n\n//# sourceURL=webpack://Nvideoapp/./src/assets/css/bounceIn.css?')},"./src/assets/utils/nvideoapp.js":function(module,__webpack_exports__,__webpack_require__){"use strict";eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Nvideoapp\", function() { return Nvideoapp; });\n/* harmony import */ var _assets_css_bounceIn_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/assets/css/bounceIn.css */ \"./src/assets/css/bounceIn.css\");\n/* harmony import */ var _assets_css_bounceIn_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_assets_css_bounceIn_css__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var dsbridge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! dsbridge */ \"./node_modules/dsbridge/index.js\");\n/* harmony import */ var dsbridge__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(dsbridge__WEBPACK_IMPORTED_MODULE_1__);\n//资源请求\r\n\r\n\r\n\r\nlet Nvideoapp = {\r\n    shareData: {\r\n        title: document.title,  // 分享标题\r\n        desc: '',   // 分享描述\r\n        link: location.href,    // 分享链接\r\n        imgUrl: 'https://ndvideo.s3.cn-south-1.jdcloud-oss.com/static/logo_01.png'   // 分享图标\r\n    },\r\n    navigateMethodList: [\r\n        // 音频相关\r\n        { typeName: 'audio', space: 'audio', method: 'navToAudioDetail', },\r\n        { typeName: 'audioTopic', space: 'audio', method: 'navToAudioTopic', },\r\n        // 报料相关\r\n        { typeName: 'baoliaoAdd', space: 'baoliao', method: 'send', },\r\n        { typeName: 'baoliaoList', space: 'baoliao', method: 'navToBaoLiaoTab', },\r\n        { typeName: 'baoliaoMylist', space: 'baoliao', method: 'navToMyBaoLiao', },\r\n        // 频道\r\n        { typeName: 'channel', space: 'channel', method: 'navToChannel', },\r\n        // 评论列表\r\n        { typeName: 'comment', space: 'content', method: 'navToCommentList', },\r\n        // 动态详情\t\r\n        { typeName: 'dynamics', space: 'dynamic', method: 'navToDynamicDetail', },\r\n        { typeName: 'dynamicsAdd', space: 'dynamic', method: 'navToSendDynamic', },\r\n        // 跳转记者空间原生页\r\n        { typeName: 'journalist', space: 'reporter', method: 'navToJournalist', },\r\n        // 机构数据库详情页\r\n        { typeName: 'organization', space: 'thinkTank', method: 'navToOrganization', },\r\n        // 主题(小圈)\r\n        { typeName: 'topic', space: 'topic', method: 'navToTopicDetail', },\r\n        // 跳转视频原生页面\r\n        { typeName: 'video', space: 'video', method: 'navToVideo', },\r\n        // 跳转视频专辑\r\n        { typeName: 'videoList', space: 'video', method: 'navToVideoList', },\r\n        // 跳转南都号空间\r\n        { typeName: 'zone', space: 'zone', method: 'navToZone', },\r\n        // 跳转到外链\r\n        { typeName: 'url', space: 'navigation', method: 'open', },\r\n        // 打开微信小程序\r\n        { typeName: 'wxMiniProgram', space: 'navigation', method: 'launchWxMiniProgram' }\r\n    ],\r\n    jsApiList: [\r\n        { jsApi: 'navigateBack', space: 'navigation', method: 'closeCurrentPage' },\r\n        { jsApi: 'login', space: 'userBase', method: 'login' },\r\n        { jsApi: 'isLoginedSync', space: 'userBase', method: 'isLoginedSync' },\r\n        { jsApi: 'getUserBaseInfo', space: 'userBase', method: 'getInfo' },\r\n        { jsApi: 'getUserSensitiveInfo', space: 'userSensitiveInfo', method: 'getInfo' },\r\n        { jsApi: 'getSystemInfo', space: 'deviceInfo', method: 'getSystemInfo' },\r\n        { jsApi: 'previewImage', space: 'photo', method: 'previewImage' },\r\n        { jsApi: 'updateShareData', space: 'share', method: 'updateShareData' },\r\n        { jsApi: 'openShareMenu', space: 'share', method: 'openShareMenu' },\r\n        { jsApi: 'onShareApp', space: 'share', method: 'shareScene' },\r\n        { jsApi: 'hideAllNonBaseMenuItem', space: 'menu', method: 'hideAllNonBaseMenuItem' },\r\n        { jsApi: 'showAllNonBaseMenuItem', space: 'menu', method: 'showAllMenuItem' },\r\n    ],\r\n\r\n\r\n    /**\r\n     * 检测是否N视频App\r\n     * @returns {Boolean}\r\n     **/\r\n    isNvideoapp() {\r\n        if(window.navigator.userAgent.toLowerCase().match(/ndVideoApp/i)==\"ndvideoapp\") {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 提示弹窗\r\n     * @param {String} msg      弹窗内容\r\n     * @param {String} cancel   是否显示取消按钮(可选，默认false)\r\n     * @param {Function} confirm 确定按钮回调函数\r\n     * @param {Function} cancel 取消按钮回调函数\r\n     **/\r\n    alert(msg, showCancel, confirm, cancel) {\r\n        let dialogFrame = document.createElement(\"DIV\");\r\n        dialogFrame.id = \"dialogFrame\";\r\n        dialogFrame.style.position = \"fixed\";\r\n        dialogFrame.style.background = \"rgba(0,0,0,0.3)\";\r\n        dialogFrame.style.fontSize = \"16px\";\r\n        dialogFrame.style.lineHeight = \"30px\";\r\n        dialogFrame.style.width = \"100%\";\r\n        dialogFrame.style.height = \"100%\";\r\n        dialogFrame.style.left = \"0\";\r\n        dialogFrame.style.top = \"0\";\r\n        dialogFrame.style.textAlign = \"center\";\r\n        dialogFrame.style.zIndex = \"9999\";\r\n\r\n        let dialog = \"<div class=\\\"dialogBounceIn\\\" style=\\\"position:fixed;top:50%;left:10%;right:10%;background:#fff;border-radius:5px\\\">\\n\";\r\n        dialog += \"<div style=\\\"padding:15px;word-break:break-word;border-bottom:1px #eee solid\\\">\" + msg + \"</div>\\n\";\r\n        dialog += \"<div style=\\\"display:flex;align-items:center;justify-content:space-around;height:40px;line-height:40px;color:#26a2ff;font-weight:bold\\\">\"\r\n        if (showCancel) {\r\n            dialog += \"<div id='alertCancel'>取消</div>\\n\";\r\n        }\r\n        dialog += \"<div id='alertOk'>确定</div>\\n\";\r\n        dialog += \"</div></div>\\n\";\r\n\r\n        dialogFrame.innerHTML = dialog;\r\n        document.body.appendChild(dialogFrame);\r\n        if (showCancel) {\r\n            let closeFn = dialogClose.bind(null, true);\r\n            document.getElementById('alertCancel').addEventListener('click', closeFn);\r\n        }\r\n        document.getElementById('alertOk').addEventListener('click', dialogOk);\r\n        function dialogOk() {\r\n            dialogClose(false);\r\n            confirm && confirm()\r\n        }\r\n        function dialogClose(_showCancel) {\r\n            document.getElementById('alertOk').removeEventListener('click', dialogClose);\r\n            if (showCancel) {\r\n                document.getElementById('alertCancel').removeEventListener('click', dialogClose);\r\n                _showCancel && cancel && cancel({ errCode: 2, errMsg: '用户取消操作' });\r\n            }\r\n            document.body.removeChild(document.getElementById('dialogFrame'));\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 获取客户端版本\r\n     * @returns {String}\r\n     **/\r\n    getVersion() {\r\n        let v = navigator.userAgent.match(/\\d\\.\\d\\.\\d$/g)[0];\r\n        v = v.replace(/\\./g, \"\");\r\n        return v;\r\n    },\r\n\r\n    /** 初始化dsBridge\r\n     *  注意：必须配置必填参数，否则无法注入app方法\r\n     *  建议在页面加载时调用\r\n     *  建议一个页面只存在一个ready方法\r\n     *  @param {Number} appId       APPID，必填\r\n     *  @param {Array} jsApiList    js方法命名空间列表，必填\r\n     *  @param {String} timestamp   签名信息\r\n     * @param {Function} success 成功的回调\r\n     * @param {Function} fail 成功的回调\r\n     **/\r\n    ready(options = { jsApiList: [] }) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.isNvideoapp()) {\r\n                reject && reject();\r\n                options.fail && options.fail();\r\n                return;\r\n            }\r\n\r\n\r\n            // 新版本使用前需要配置\r\n            let jsApiList = options.jsApiList.map(item => {\r\n                return 'nvappNative.' + item;\r\n            })\r\n\r\n            this.activeDsBridge({\r\n                space: 'base',\r\n                method: 'config',\r\n                data: {\r\n                    appId: options.appId || '',\r\n                    jsApiList,\r\n                    timestamp: options.timestamp || '',\r\n                },\r\n                callback(res) {\r\n                    if (res.errCode === 0) {\r\n                        resolve && resolve(res);\r\n                        options.success && options.success(res);\r\n                    } else {\r\n                        reject && reject(res);\r\n                        options.fail && options.fail(res);\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    },\r\n\r\n    /**\r\n     * 直接返回成功(then)或失败(catch)\r\n     * name     Array   检查当前客户端版本是否支持指定JS接口\r\n     * @param {Function} success 成功的回调 以键值对的形式返回,可用的api值true，不可用为false\r\n     * @param {Function} fail \r\n     **/\r\n    checkJsApi(options = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.isNvideoapp()) {\r\n                reject && reject();\r\n                options.fail && options.fail();\r\n                return;\r\n            }\r\n\r\n            const name = options.name;\r\n\r\n            let nativeMethodList = [];\r\n            const navigateMethodList = this.navigateMethodList;\r\n            const jsApiList = this.jsApiList;\r\n            name.map(item => {\r\n                let nameArr = item.split('_'),\r\n                    jsApi = nameArr[0];\r\n                if (jsApi === 'navigateTo') {\r\n                    let type = nameArr[1];\r\n                    !type && console.warn(`配置接口${item}名出错了，正确示例：navigateTo_audio`);\r\n                    var { space, method } = navigateMethodList.find(item => {\r\n                        return item.typeName === type;\r\n                    }) || {}\r\n                } else {\r\n                    var { space, method } = jsApiList.find(item => {\r\n                        return item.jsApi === jsApi;\r\n                    }) || {}\r\n                }\r\n                nativeMethodList.push({ jsApi: item, nativeMethod: `nvappNative.${space}.${method}` });\r\n            })\r\n\r\n            let checkResult = {};\r\n            nativeMethodList.map(item => {\r\n                checkResult[item.jsApi] = dsbridge__WEBPACK_IMPORTED_MODULE_1___default.a.hasNativeMethod(item.nativeMethod) ? true : false;\r\n            })\r\n            resolve && resolve(checkResult);\r\n            options.success && options.success(checkResult);\r\n        })\r\n    },\r\n\r\n    /**\r\n     * 触发DsBridge\r\n     * @param {String} space       命名空间\r\n     * @param {String} method      调用方法\r\n     * @param {Objert} data        方法需要的参数\r\n     * @param {Object} callback    回调处理\r\n     */\r\n    activeDsBridge(options = {}) {\r\n        if (!this.isNvideoapp()) { return }\r\n        let { space, method, data, callback } = options;\r\n        const methodName = \"nvappNative.\" + space + \".\" + method;\r\n        // 检查方法是否存在\r\n        if (!dsbridge__WEBPACK_IMPORTED_MODULE_1___default.a.hasNativeMethod(methodName)) {\r\n            console.log('未注入方法' + methodName + '，请检查权限');\r\n            this.alert('您当前的使用的客户端版本太低，无法支持该功能。请更新到最新版本！' + methodName);\r\n            return;\r\n        }\r\n\r\n        console.log(\"调用的参数\");\r\n        console.log(data);\r\n        console.log(\"运行方法：\" + methodName + \"，回调信息\");\r\n        if (method.indexOf('Sync') < 0) {\r\n            // \"异步\"方法有回调函数\r\n            if (typeof data !== 'undefined') {\r\n                dsbridge__WEBPACK_IMPORTED_MODULE_1___default.a.call(methodName, data, res => {\r\n                    console.log('\"异步\"方法有回调:', res);\r\n                    callback && callback(res);\r\n                })\r\n            } else {\r\n                dsbridge__WEBPACK_IMPORTED_MODULE_1___default.a.call(methodName, res => {\r\n                    console.log('\"异步\"方法有回调:', res);\r\n                    callback && callback(res);\r\n                })\r\n            }\r\n\r\n        } else {\r\n            // \"同步\"方法有返回值\r\n            let res;\r\n            if (typeof data !== 'undefined') {\r\n                res = dsbridge__WEBPACK_IMPORTED_MODULE_1___default.a.call(methodName, data);\r\n            } else {\r\n                res = dsbridge__WEBPACK_IMPORTED_MODULE_1___default.a.call(methodName);\r\n            }\r\n            console.log(`同步方法返回：${res}`);\r\n            return res;\r\n        }\r\n    },\r\n\r\n    /**\r\n     * 跳转到应用内的某个页面\r\n     * @param {String} type 页面类型（可参照下方新旧版方法对照表传入对应typeName）\r\n     * @param {Object} data 参数（具体方法对应的参数请参照wiki文档）\r\n     * @param {Function} success 成功的回调\r\n     * @param {Function} fail 失败的回调\r\n     * @param {Function} complete 接口调用完成时执行的回调函数，无论成功或失败都会执行\r\n     * */\r\n    navigateTo(options = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.isNvideoapp()) { return }\r\n            /** \r\n             * typeName 页面类型(旧版方法名)\r\n             * space 新版命名空间 \r\n             * method 新版方法名\r\n             **/\r\n            const MethodList = this.navigateMethodList;\r\n            \r\n\r\n\r\n            let { type, data = {} } = options,\r\n                { space, method } = MethodList.find(item => {\r\n                    return type == item.typeName;\r\n                }) || {};\r\n\r\n\r\n            // 处理id\r\n            let idNickname = [\r\n                { type: 'audio', nickname: 'audioId' },\r\n                { type: 'audioTopic', nickname: 'albumId' },\r\n                { type: 'dynamics', nickname: 'dynamicId' },\r\n                { type: 'topic', nickname: 'topicId' },\r\n                { type: 'videoList', nickname: 'albumId' },\r\n            ]\r\n            idNickname.map(item => {\r\n                if (item.type === type) {\r\n                    data[item.nickname] = data.id;\r\n                    delete data.id;\r\n                }\r\n            })\r\n            // data.type用来兼容旧版 调用新版接口不需传入type\r\n            delete data.type;\r\n\r\n            this.activeDsBridge({\r\n                space, method, data,\r\n                callback(res) {\r\n                    if (res.errCode === 0) {\r\n                        options.success && options.success(res)\r\n                        resolve && resolve(res);\r\n                    } else {\r\n                        options.fail && options.fail(res);\r\n                        reject && reject(res);\r\n                    }\r\n                    options.complete && options.complete(res);\r\n                }\r\n            });\r\n        })\r\n    },\r\n    /**\r\n     * 关闭当前页面，返回上一页面\r\n     */\r\n    navigateBack() {\r\n        if (!this.isNvideoapp()) { return }\r\n        this.activeDsBridge({\r\n            space: 'navigation', method: 'closeCurrentPage'\r\n        });\r\n\r\n    },\r\n\r\n    /**\r\n     * 登录\r\n     * @param {Boolean} showAlert 是否显示提示确认框\r\n     * @param {String} alertMessage 提示确认框的文案\r\n     * @param {Function} success 登录成功的回调\r\n     * @param {Function} cancel 用户取消登录的回调\r\n     * @param {Function} fail 登录失败的回调\r\n     * @param {Function} complete 接口调用完成时执行的回调函数，无论成功或失败都会执行\r\n    * */\r\n    login(options = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.isNvideoapp()) { return }\r\n            let { showAlert = false, alertMessage = \"您还未登录，确定前往登录?\" } = options;\r\n            if (showAlert) {\r\n                this.alert(alertMessage, true, () => {\r\n                    doLogin(this)\r\n                }, res => {\r\n                    options.cancel && options.cancel(res);\r\n                    reject && reject(res);\r\n                })\r\n            } else {\r\n                doLogin(this)\r\n            }\r\n\r\n            function doLogin(_this) {\r\n                _this.activeDsBridge({\r\n                    space: 'userBase',\r\n                    method: 'login',\r\n                    callback(res) {\r\n                        if (res.errCode === 0) {\r\n                            options.success && options.success(res)\r\n                            resolve && resolve(res)\r\n                        } else if (res.errCode === 2) {\r\n                            options.cancel && options.cancel(res)\r\n                            reject && reject(res);\r\n                        } else {\r\n                            options.fail && options.fail(res);\r\n                            reject && reject(res);\r\n                        }\r\n                        options.complete && options.complete(res);\r\n                    }\r\n                })\r\n            }\r\n        })\r\n    },\r\n    /**\r\n     * 获取用户登录状态\r\n     */\r\n    isLoginedSync() {\r\n        if (!this.isNvideoapp()) { return }\r\n        let status = this.activeDsBridge({\r\n            space: 'userBase',\r\n            method: 'isLoginedSync',\r\n        })\r\n        return status === 1 ? true : false;\r\n    },\r\n    /**\r\n     * 获取用户本信息\r\n     * @param {Function} success 成功的回调\r\n     * @param {Function} fail 失败的回调\r\n     * @param {Function} complete 接口调用完成时执行的回调函数，无论成功或失败都会执行\r\n     */\r\n    getUserBaseInfo(options = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.isNvideoapp()) { return }\r\n            this.activeDsBridge({\r\n                space: 'userBase',\r\n                method: 'getInfo',\r\n                callback(res) {\r\n                    if (res.errCode === 0) {\r\n                        options.success && options.success(res)\r\n                        resolve && resolve(res)\r\n                    } else {\r\n                        options.fail && options.fail(res);\r\n                        reject && reject(res);\r\n                    }\r\n                    options.complete && options.complete(res);\r\n                }\r\n            })\r\n        })\r\n    },\r\n    /**\r\n     * 获取用户敏感信息\r\n     * @param {Function} success 成功的回调\r\n     * @param {Function} fail 失败的回调\r\n     * @param {Function} complete 接口调用完成时执行的回调函数，无论成功或失败都会执行\r\n     */\r\n    getUserSensitiveInfo(options = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.isNvideoapp()) { return }\r\n\r\n            this.activeDsBridge({\r\n                space: 'userSensitiveInfo',\r\n                method: 'getInfo',\r\n                callback(res) {\r\n                    if (res.errCode === 0) {\r\n                        options.success && options.success(res)\r\n                        resolve && resolve(res)\r\n                    } else {\r\n                        options.fail && options.fail(res);\r\n                        reject && reject(res);\r\n                    }\r\n                    options.complete && options.complete(res);\r\n                }\r\n            })\r\n\r\n        })\r\n\r\n    },\r\n    /**\r\n     * 获取系统信息\r\n     * @param {Function} success 成功的回调\r\n     * @param {Function} fail 失败的回调\r\n     * @param {Function} complete 接口调用完成时执行的回调函数，无论成功或失败都会执行\r\n     */\r\n    getSystemInfo(options = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.isNvideoapp()) { return }\r\n            this.activeDsBridge({\r\n                space: 'deviceInfo',\r\n                method: 'getSystemInfo',\r\n                callback(res) {\r\n                    if (res.errCode === 0) {\r\n                        options.success && options.success(res)\r\n                        resolve && resolve(res)\r\n                    } else {\r\n                        options.fail && options.fail(res);\r\n                        reject && reject(res);\r\n                    }\r\n                    options.complete && options.complete(res);\r\n                }\r\n            })\r\n\r\n        })\r\n\r\n    },\r\n\r\n    /**\r\n     * 预览图片\r\n     * @param {Number} index  当前图片序号\r\n     * @param {Array} urls    图片列表\r\n     * @param {Function} success 成功的回调\r\n     * @param {Function} fail 失败的回调\r\n     * @param {Function} complete 接口调用完成时执行的回调函数，无论成功或失败都会执行\r\n     */\r\n    previewImage(options = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.isNvideoapp()) { return }\r\n            let { index = 0, urls } = options;\r\n\r\n            this.activeDsBridge({\r\n                space: 'photo', method: 'previewImage', data: {\r\n                    index: index,\r\n                    urls: urls\r\n                }, callback(res) {\r\n                    if (res.errCode === 0) {\r\n                        options.success && options.success(res)\r\n                        resolve && resolve(res)\r\n                    } else {\r\n                        options.fail && options.fail(res);\r\n                        reject && reject(res);\r\n                    }\r\n                    options.complete && options.complete(res);\r\n                }\r\n            })\r\n\r\n        })\r\n    },\r\n\r\n\r\n    /**\r\n     * 设置分享内容\r\n     * 对应新版本 share.updateShareData\r\n     * @param {String} title   分享标题（可选）\r\n     * @param {String} desc    分享描述（可选）\r\n     * @param {String} link    分享地址（可选）\r\n     * @param {String} imgUrl  分享图标（可选）\r\n     * @param {Function} success\r\n     * @param {Function} fail\r\n     * @param {Function} complete\r\n     */\r\n    updateShareData(options = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.isNvideoapp()) { return }\r\n            let data = this.shareData;//修改默认值\r\n            Object.assign(data, options);\r\n\r\n            this.activeDsBridge({\r\n                space: 'share', method: 'updateShareData', data, callback(res) {\r\n                    if (res.errCode === 0) {\r\n                        options.success && options.success(res)\r\n                        resolve && resolve(res)\r\n                    } else {\r\n                        options.fail && options.fail(res);\r\n                        reject && reject(res);\r\n                    }\r\n                    options.complete && options.complete(res);\r\n                }\r\n            });\r\n\r\n        })\r\n\r\n    },\r\n\r\n    /**\r\n     * 打开分享面板\r\n     * 对应新版本 share.openShareMenu\r\n     * @param {String} title   分享标题（可选）\r\n     * @param {String} desc    分享描述（可选）\r\n     * @param {String} link    分享地址（可选）\r\n     * @param {String} imgUrl  分享图标（可选）\r\n     * @param {Function} success\r\n     * @param {Function} fail\r\n     * @param {Function} complete\r\n     */\r\n    openShareMenu(options = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.isNvideoapp()) { return }\r\n            let data = { ...this.shareData };\r\n            if (Object.keys(options).length > 0) {\r\n                Object.assign(data, options);\r\n            }\r\n\r\n            this.activeDsBridge({\r\n                space: 'share', method: 'openShareMenu', data: { shareData: data }, callback(res) {\r\n                    if (res.errCode === 0) {\r\n                        options.success && options.success(res)\r\n                        resolve && resolve(res)\r\n                    } else {\r\n                        options.fail && options.fail(res);\r\n                        reject && reject(res);\r\n                    }\r\n                    options.complete && options.complete(res);\r\n                }\r\n            });\r\n\r\n        })\r\n    },\r\n\r\n    /**\r\n     * 直接分享到具体的渠道\r\n     * 对应新版本 share.shareScene\r\n     * @param {String} scene   渠道标识，必填\r\n     * @param {Object} data    \r\n     * @param {Function} success\r\n     * @param {Function} fail\r\n     * @param {Function} complete\r\n     * ----- scene可选参数 -----\r\n     * @param {String} card     生成卡片\r\n     * @param {String} wxFriend    微信好友\r\n     * @param {String} wxTimeline  朋友圈\r\n     * ----- data可选参数 -----\r\n     * @param {String} title   分享标题\r\n     * @param {String} desc    分享描述\r\n     * @param {String} link    分享地址\r\n     * @param {String} imgUrl  分享图标\r\n     * @param {String} id      文章DocID（scene为card时必填）\r\n     */\r\n    onShareApp(options = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.isNvideoapp()) { return }\r\n            let { scene, data = {} } = options;\r\n            let shareData = { ...this.shareData };\r\n            if (Object.keys(data).length > 0) {\r\n                Object.assign(shareData, data);\r\n            }\r\n\r\n\r\n            this.activeDsBridge({\r\n                space: 'share', method: 'shareScene', data: { scene, shareData }, callback(res) {\r\n                    if (res.errCode === 0) {\r\n                        options.success && options.success(res)\r\n                        resolve && resolve(res)\r\n                    } else {\r\n                        options.fail && options.fail(res);\r\n                        reject && reject(res);\r\n                    }\r\n                    options.complete && options.complete(res);\r\n                }\r\n            });\r\n        })\r\n    },\r\n    /**\r\n     * 隐藏所有非基础按钮接口\r\n     * @param {Function} success 成功的回调\r\n     * @param {Function} fail 失败的回调\r\n     * @param {Function} complete 接口调用完成时执行的回调函数，无论成功或失败都会执行\r\n     */\r\n    hideAllNonBaseMenuItem(options = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.isNvideoapp()) { return }\r\n            this.activeDsBridge({\r\n                space: 'menu', method: 'hideAllNonBaseMenuItem', callback(res) {\r\n                    if (res.errCode === 0) {\r\n                        options.success && options.success(res)\r\n                        resolve && resolve(res)\r\n                    } else {\r\n                        options.fail && options.fail(res);\r\n                        reject && reject(res);\r\n                    }\r\n                    options.complete && options.complete(res);\r\n                }\r\n            });\r\n        })\r\n    },\r\n    /**\r\n     * 显示所有功能按钮接口\r\n     * @param {Function} success 成功的回调\r\n     * @param {Function} fail 失败的回调\r\n     * @param {Function} complete 接口调用完成时执行的回调函数，无论成功或失败都会执行\r\n     */\r\n    showAllNonBaseMenuItem(options = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            if (!this.isNvideoapp()) { return }\r\n\r\n            this.activeDsBridge({\r\n                space: 'menu', method: 'showAllMenuItem', callback(res) {\r\n                    if (res.errCode === 0) {\r\n                        options.success && options.success(res)\r\n                        resolve && resolve(res)\r\n                    } else {\r\n                        options.fail && options.fail(res);\r\n                        reject && reject(res);\r\n                    }\r\n                    options.complete && options.complete(res);\r\n                }\r\n            });\r\n\r\n        })\r\n    }\r\n};\r\n\r\n\n\n//# sourceURL=webpack://Nvideoapp/./src/assets/utils/nvideoapp.js?")}}).Nvideoapp});